package com.test;

class TrieNode
{
	final int ALPHABET_SIZE = 26;
    TrieNode[] children = new TrieNode[ALPHABET_SIZE];
    boolean isEndOfWord;
     
    TrieNode(){
        isEndOfWord = false;
        for (int i = 0; i < ALPHABET_SIZE; i++)
            children[i] = null;
    }
};

public class Trie {
    
    TrieNode root; 
    public void insert(String key)
    {
        int level;
        int length = key.length();
        int index;
      
        TrieNode pCrawl = root;
      
        for (level = 0; level < length; level++)
        {
        	if(Character.isLowerCase(key.charAt(level)))
        		index = key.charAt(level) - 'a';
        	else
        		index = key.charAt(level) - 'A';
            if (pCrawl.children[index] == null)
                pCrawl.children[index] = new TrieNode();
      
            pCrawl = pCrawl.children[index];
        }
      
        // mark last node as leaf
        pCrawl.isEndOfWord = true;
    }
      
    public boolean search(String key)
    {
        int level;
        int length = key.length();
        int index;
        TrieNode pCrawl = root;
      
        for (level = 0; level < length; level++)
        {
        	if(Character.isLowerCase(key.charAt(level)))
        		index = key.charAt(level) - 'a';
        	else
        		index = key.charAt(level) - 'A';
      
            if (pCrawl.children[index] == null)
                return false;
      
            pCrawl = pCrawl.children[index];
        }
      
        return (pCrawl != null && pCrawl.isEndOfWord);
    }
      
    static int[] sort_hotels(String keywords, int[] hotel_ids, String[] reviews) {
    	
    }
    
    public static void main(String args[])
    {
       
    	String key = "breakfast beach citycenter location metro view staff price";
    	int[] hotel_id = {1,2,1,2,1,2};
    	String[] review = {"This hotel has a nice view of the citycenter. The location is perfect.",
    			"The breakfast is ok. Regarding location, it is quite far from citycenter but price is cheap so it is worth.",
    			"Location is excellent, 5 minutes from citycenter. There is also a metro station very close to the hotel.",
    			"They said I couldn't take my dog and there were other guests with dogs! That is not fair.",
    			"Very friendly staff and good cost-benefit ratio. Its location is a bit far from citycenter."};
    	sort_hotels(key, hotel_id, review);
    	
    	// Input keys (use only 'a' through 'z' and lower case)
        String keys[] = {"The", "a", "there", "answer", "any",
                         "by", "bye", "their"};
      
        String output[] = {"Not present in trie", "Present in trie"};
      
        Trie tr = new Trie();
        tr.root = new TrieNode();
      
        // Construct trie
        int i;
        for (i = 0; i < keys.length ; i++)
            tr.insert(keys[i]);
      
        // Search for different keys
        if(tr.search("the") == true)
            System.out.println("the --- " + output[1]);
        else System.out.println("the --- " + output[0]);
         
        if(tr.search("these") == true)
            System.out.println("these --- " + output[1]);
        else System.out.println("these --- " + output[0]);
         
        if(tr.search("their") == true)
            System.out.println("their --- " + output[1]);
        else System.out.println("their --- " + output[0]);
         
        if(tr.search("thaw") == true)
            System.out.println("thaw --- " + output[1]);
        else System.out.println("thaw --- " + output[0]);
        
    }
}