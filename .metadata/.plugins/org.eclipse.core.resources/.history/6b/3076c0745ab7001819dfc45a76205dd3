package com.hackerrank;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/*
 * You are given an array and you need to find number of tripets of indices (i,j,k) such that the elements at those indices are in geometric progression for a given 
 * common ratio r and i<j<k.

For example, arr[1,4,16,64] . If r=4, we have [1,4,16] and [4,16,64]
 */
public class HashMap04 {

	static long countTriplets(List<Long> arr, long r) {
		
		Map<Long, Long> map = new HashMap<Long, Long>();
		Map<Long, Long> prev = new HashMap<Long, Long>();
		long size = arr.size();
		for(int i=0;i<size;i++){
			Long key = arr.get(i);
			Long value = map.get(key);
			if(value==null)
				map.put(key, 1L);
			else
				map.put(key, ++value);
		}
		Long one=0L, ans=0L, two, three;
		
		for(int i=0;i<size;i++){
			one = arr.get(i);
			two = map.get(one*r);
			three = map.get(one*r*r);
			if(two!=null && three!=null){
				Long two1 = prev.get(one*r);
				if(two1!=null)
					two = two-two1;
				Long three1 = prev.get(one*r*r);
				if(three1!=null)
					three = three-three1;
				ans+=(1*two*three);
			}
			Long value = prev.get(one);
			if(value==null)
				prev.put(one, 1L);
			else
				prev.put(one, ++value);
		}
		return ans;
    }
	
	public static void main(String[] args) throws IOException {
        
		/*List<Long> arr = new ArrayList<Long>();
		arr.add(1L);
		arr.add(3L);
		arr.add(9L);
		arr.add(9L);
		arr.add(27L);
		arr.add(81L);
		int r=3;*/
        
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        String[] nr = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n = Integer.parseInt(nr[0]);

        long r1 = Long.parseLong(nr[1]);

        List<Long> arr1 = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Long::parseLong)
            .collect(Collectors.toList());
        long ans = countTriplets(arr1, r1);
       System.out.println(ans);
    }
}
